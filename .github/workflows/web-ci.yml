name: web-ci

on:
  workflow_call:
    inputs:
      runs-on:
        type: string
        default: self-hosted
      sparse-checkout:
        type: string
        required: false
      dotnet-version:
        type: string
        default: 8.0.x
      dotnet-project-path:
        type: string
        required: false
        default: .
      dotnet-project-file:
        type: string
        required: false
      bun-version:
        type: string
        required: false
        default: 1.x
      nodejs-version:
        type: string
        required: false
        default: 20.x
      nodejs-project-path:
        type: string
        required: false
        default: .

env:
  DOTNET_INSTALL_DIR: "./.dotnet"
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1

jobs:
  build-nodejs:
    runs-on: ${{ inputs.runs-on }}
    steps:
      - name: ⬇️ Checkout repository
        uses: actions/checkout@v4
        with:
          sparse-checkout: ${{ inputs.sparse-checkout }}

      - name: 🧪 Test for NodeJS
        id: test
        uses: andstor/file-existence-action@v3
        with:
          files: "**/package.json"
          ignore_case: true

      - name: ⚙️ Setup NodeJS
        if: steps.test.outputs.files_exists == 'true'
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ inputs.bun-version }}

      # - name: 🏦 Cache dependencies
      #   if: steps.test.outputs.files_exists == 'true'
      #   id: cache-bun
      #   uses: actions/cache@v4
      #   with:
      #     path: ~/.bun/install/cache
      #     key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
      #     restore-keys: |
      #       ${{ runner.os }}-bun-

      - name: 📦 Install dependencies
        if: steps.test.outputs.files_exists == 'true' #&& steps.cache-npm.outputs.cache-hit != 'true'
        working-directory: ${{ inputs.nodejs-project-path }}
        run: bun install --frozen-lockfile

      - name: 🚀 Bun run
        if: steps.test.outputs.files_exists == 'true' #&& steps.cache-npm.outputs.cache-hit != 'true'
        working-directory: ${{ inputs.nodejs-project-path }}
        run: bunx --bun vite build

  build-dotnet-core:
    runs-on: ${{ inputs.runs-on }}
    steps:
      - name: ⬇️ Checkout repository
        uses: actions/checkout@v4
        with:
          sparse-checkout: ${{ inputs.sparse-checkout }}

      - name: 🧪 Test for Dotnet Core
        id: test
        uses: andstor/file-existence-action@v3
        with:
          files: "**/*.csproj, **/appSettings.json"
          ignore_case: true

      - name: ⚙️ Setup Dotnet
        if: steps.test.outputs.files_exists == 'true'
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ inputs.dotnet-version }}

      - name: 🚀 Dotnet build
        if: steps.test.outputs.files_exists == 'true'
        working-directory: ${{ inputs.dotnet-project-path }}
        run: dotnet build --nologo --configuration Release

  build-dotnet-framework:
    runs-on: ${{ inputs.runs-on }}
    steps:
      - name: ⬇️ Checkout repository
        uses: actions/checkout@v4
        with:
          sparse-checkout: ${{ inputs.sparse-checkout }}

      - name: 🧪 Test for Dotnet Framework
        id: test
        uses: andstor/file-existence-action@v3
        with:
          files: "**/*.csproj, **/Web.config"
          ignore_case: true

      - name: ⚙️ Setup MSBuild
        if: steps.test.outputs.files_exists == 'true'
        uses: microsoft/setup-msbuild@v2

      - name: ⚙️ Setup Nuget
        if: steps.test.outputs.files_exists == 'true'
        uses: nuget/setup-nuget@v2

      - name: 📦 Restore packages
        if: steps.test.outputs.files_exists == 'true'
        working-directory: ${{ inputs.dotnet-project-path }}
        run: nuget restore ${{ inputs.dotnet-project-file }}

      - name: 🚀 Dotnet build
        if: steps.test.outputs.files_exists == 'true'
        working-directory: ${{ inputs.dotnet-project-path }}
        run: msbuild.exe ${{ inputs.dotnet-project-file }} /nologo /nr:false /p:platform="Any CPU" /p:configuration="Release"
